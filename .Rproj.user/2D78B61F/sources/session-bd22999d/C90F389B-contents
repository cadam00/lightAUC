n <- 1e7
probs <- runif(n)
actual <- sample(c(1,0), n, replace=T)
bench::mark(lightAUC::lightAUC(probs, actual),
            lightAUC::lightAUC(probs, actual, parallel=TRUE, cores=6),
            Metrics::auc(actual, probs))


test_that("lightAUC works", {
  library(lightAUC)
  probs   <- c(1, 0.4, 0.8)
  actuals <- c(0, 0, 1)
  all.equal(lightAUC(probs, actuals), 0.5)
  all.equal(lightAUC(probs, actuals, parallel = TRUE, cores = 2), 0.5)
  
  probs   <- c(1, 0.4, 0.8)
  actuals <- c(FALSE, FALSE, TRUE)
  all.equal(lightAUC(probs, actuals), 0.5)
  all.equal(lightAUC(probs, actuals, parallel = TRUE, cores = -1L), 0.5)
  
  probs   <- c(1, 0.4, 0.8)
  actuals <- c(0.0, 0.0, 1.0)
  all.equal(lightAUC(probs, actuals), 0.5)
  all.equal(lightAUC(probs, actuals, parallel = TRUE, cores = -1L), 0.5)
  
  tryerror <- try(lightAUC(probs, actuals, parallel = TRUE, cores = 0L),
                  silent = TRUE)
  
  expect_true(class(tryerror) == "try-error")
  
  all.equal(
    tryerror[[1]],
    paste0("Error : If parallel=TRUE, then cores must be -1 or positive.\n")
  )
  
  tryerror <- try(lightAUC(probs, as.character(actuals)),
                  silent = TRUE)
  
  expect_true(class(tryerror) == "try-error")
  
  all.equal(
    tryerror[[1]],
    paste0("Error : Unsupported type for 'actual'.\n")
  )
  
  tryerror <- try(lightAUC(probs, as.character(actuals), parallel=TRUE),
                  silent = TRUE)
  
  expect_true(class(tryerror) == "try-error")
  
  all.equal(
    tryerror[[1]],
    paste0("Error : Unsupported type for 'actual'\n")
  )
  
})