library(lightAUC)
probs   <- c(1, 0.4, 0.8)
actuals <- c(0, 0, 1)
tryerror <- try(lightAUC(probs, as.character(actuals)),
silent = TRUE)
tryerror[[1]]
tryerror <- try(lightAUC(probs, as.character(actuals), parallel=TRUE),
silent = TRUE)
tryerror
probs   <- c(1, 0.4, 0.8)
actuals <- c(0.0, 0.0, 1.0)
tryerror <- try(lightAUC(probs, as.character(actuals), parallel=TRUE),
silent = TRUE)
tryerror [[1]]
probs   <- c(1, 0.4, 0.8)
actuals <- c(FALSE, FALSE, TRUE)
expect_equal(lightAUC(probs, actuals), 0.5)
probs   <- c(1, 0.4, 0.8)
actuals <- c(FALSE, FALSE, TRUE)
expect_equal(lightAUC(probs, actuals), 0.5)
probs   <- c(1, 0.4, 0.8)
actuals <- c(FALSE, FALSE, TRUE)
all.equal(lightAUC(probs, actuals), 0.5)
all.equal(lightAUC(probs, actuals, parallel = TRUE, cores = -1L), 0.5)
probs   <- c(1, 0.4, 0.8)
actuals <- c(0.0, 0.0, 1.0)
probs   <- c(1, 0.4, 0.8)
actuals <- c(0, 0, 1)
library(lightAUC)
expect_equal(lightAUC(probs, actuals), 0.5)
library(lightAUC)
probs   <- c(1, 0.4, 0.8)
actuals <- c(0, 0, 1)
all.equal(lightAUC(probs, actuals), 0.5)
all.equal(lightAUC(probs, actuals, parallel = TRUE), 0.5)
probs   <- c(1, 0.4, 0.8)
actuals <- c(0, 0, 1)
lightAUC(probs, actuals, parallel = TRUE, cores = -1L)
probs   <- c(1, 0.4, 0.8)
actuals <- c(0, 0, 1)
lightAUC::lightAUC(probs, actuals, parallel = TRUE, cores = -1L)
gc()
gc()
library(lightAUC)
probs   <- c(1, 0.4, 0.8)
actuals <- c(0, 0, 1)
all.equal(lightAUC(probs, actuals), 0.5)
all.equal(lightAUC(probs, actuals, parallel = TRUE), 0.5)
gc()
library(lightAUC)
probs   <- c(1, 0.4, 0.8)
actuals <- c(0, 0, 1)
all.equal(lightAUC(probs, actuals), 0.5)
all.equal(lightAUC(probs, actuals, parallel = TRUE), 0.5)
library(lightAUC)
probs   <- c(1, 0.4, 0.8)
actuals <- c(0, 0, 1)
lightAUC(probs, actuals, parallel = TRUE)
Rcpp::sourceCpp("C://Users//Administrator//Desktop//arma_roc.cpp")
fast_auc_code_par(probs, actual, parallel=TRUE, cores=12)
fast_auc_code_par(probs, actual, parallel=TRUE, numThreads =12)
fast_auc_code_par(probs, actual, numThreads =12)
fast_auc_code_par(probs, actuals, numThreads =12)
gc()
renv::refresh()
probs   <- c(1, 0.4, 0.8)
actuals <- c(0, 0, 1)
all.equal(lightAUC(probs, actuals), 0.5)
all.equal(lightAUC(probs, actuals, parallel = TRUE), 0.5)
gc()
gc()
gc()
probs   <- c(1, 0.4, 0.8)
actuals <- c(0, 0, 1)
lightAUC(probs, actuals, parallel = TRUE, cores = -1L)
Rcpp::sourceCpp("C://Users//Administrator//Documents//packages//lightAUC//src//lightauc.cpp")
lightAUC(probs, actuals, parallel = TRUE, cores = 2)
RcppParallel::numThreads()
covr::report()
covr::report()
covr::report()
getwd()
covr::report()
covr::report()
usethis::use_pkgdown()
usethis::use_git()
usethis::use_github(protocol="https")
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
usethis::use_github(protocol="https")
pkgdown::build_site()
usethis::use_github_pages()
usethis::use_pkgdown_github_pages()
usethis::create_from_github("cadam00/lightAUC", fork = FALSE)
usethis::git_sitrep()
use_git_config(user.name = "cadam00")
usethis::use_git_config(user.name = "cadam00")
use_git_config(user.name = "cadam00")
usethis::git_sitrep()
